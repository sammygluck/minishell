mplementing a heredoc (here-document) in your minishell project involves several stages: lexing, parsing, and executing. Let's break down these stages and address the specific rules and edge cases related to heredocs, especially the distinction between EOF and 'EOF'.
1. Lexing

The lexer (or tokenizer) is responsible for recognizing the heredoc operator (<<) and the delimiter that follows it. Here's a simplified approach:

    Identify Heredoc: When the lexer encounters <<, it should recognize this as the start of a heredoc.
    Read Delimiter: The next token after << is considered the delimiter. The delimiter can be a word or a quoted string.
    Handle Quoting: If the delimiter is quoted (like 'EOF'), it's important to store this information for later stages.

2. Parsing

The parser uses the tokens provided by the lexer to create a command structure. In the case of a heredoc:

    Create Heredoc Node: The parser should create a node (or a similar structure) for the heredoc, linking it to the command it belongs to.
    Store Delimiter: Store the delimiter as part of the heredoc node, along with information about whether it was quoted.

3. Execution

During execution, the shell reads input until it encounters a line containing only the delimiter. Here's where the behavior differs based on whether the delimiter was quoted:

    Unquoted (EOF): If the delimiter was unquoted, the shell performs parameter expansion, command substitution, and arithmetic expansion on the lines it reads before reaching the delimiter.
    Quoted ('EOF'): If the delimiter was quoted, the shell treats the input lines literally, without any expansions.

Handling Edge Cases and Rules:

    Differences between EOF and 'EOF':
        Parameter Expansion: With an unquoted EOF, the text is subject to expansions. With a quoted 'EOF', expansions are not performed.
        Quotes Removal: In both cases, the actual delimiter used to terminate the heredoc input does not include any quotes. So, whether you use EOF or 'EOF', you end the heredoc with a line containing only EOF.

    Nested Heredocs: Your shell should handle nested heredocs correctly. If a heredoc token is encountered within another heredoc, it should be processed according to the rules above.

    EOF Handling: If the end of file (EOF) is reached before the delimiter, it's typically an error. Your shell should handle this gracefully, possibly with an error message.

    Interrupt Handling: Consider how your shell handles interrupts (like Ctrl+C) while waiting for the heredoc delimiter.

    File Descriptor Management: Ensure that the file descriptors are managed correctly, especially when dealing with multiple heredocs or when heredocs are combined with pipes or redirections.

Implementing heredocs requires careful attention to how input is read and processed, and how different parts of the shell interact with each other. Testing with various edge cases and complex scenarios is crucial to ensure robust implementation.